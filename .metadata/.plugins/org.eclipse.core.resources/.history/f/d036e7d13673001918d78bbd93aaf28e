package mdd.uniandes.generatedao.test;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

import mdd.uniandes.generatedao.annotations.Init;
import mdd.uniandes.generatedao.annotations.TableColumn;
import mdd.uniandes.generatedao.annotations.TableSerializable;
import mdd.uniandes.generatedao.annotations.TableSerializationException;

public class ObjectToTableConverter {
    public String convertToTable(Object object) throws TableSerializationException {
        try {

            checkIfSerializable(object);
            initializeObject(object);
            return getInsertString(object);

        } catch (Exception e) {
            throw new TableSerializationException(e.getMessage());
        }
    }

    private void checkIfSerializable(Object object) {
        if (Objects.isNull(object)) {
            throw new TableSerializationException("Can't serialize a null object");
        }

        Class<?> clazz = object.getClass();
        if (!clazz.isAnnotationPresent(TableSerializable.class)) {
            throw new TableSerializationException("The class " + clazz.getSimpleName() + " is not annotated with JsonSerializable");
        }
    }

    private void initializeObject(Object object) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        Class<?> clazz = object.getClass();
        for (Method method : clazz.getDeclaredMethods()) {
            if (method.isAnnotationPresent(Init.class)) {
                method.setAccessible(true);
                method.invoke(object);
            }
        }
    }

    private String getInsertString(Object object) throws IllegalArgumentException, IllegalAccessException {
        Class<?> clazz = object.getClass();
        Map<String, String> tableColumnsMap = new HashMap<>();
        for (Field field : clazz.getDeclaredFields()) {
            field.setAccessible(true);
            if (field.isAnnotationPresent(TableColumn.class)) {
            	tableColumnsMap.put(getKey(field), (String) field.get(object));
            }
        }

        String columnString = tableColumnsMap.entrySet()
            .stream()
            .map(entry ->  entry.getKey() )
            .collect(Collectors.joining(","));
        
        String valuesString = tableColumnsMap.entrySet()
                .stream()
                .map(entry ->"\""+entry.getValue()+"\"")
                .collect(Collectors.joining(","));
        
        
        return "INSERT INTO "+clazz.getSimpleName().toUpperCase()+" (" + columnString + ") VALUES ("+valuesString+");";
    }

    private String getKey(Field field) {
        String value = field.getAnnotation(TableColumn.class)
            .column();
        return value.isEmpty() ? field.getName() : value;
    }
}
